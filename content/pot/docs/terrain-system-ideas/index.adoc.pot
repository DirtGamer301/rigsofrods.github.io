# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title =
#: content/source/docs/terrain-system-ideas/index.adoc:1
#, no-wrap
msgid "Terrain System Ideas"
msgstr ""

#. type: Plain text
#: content/source/docs/terrain-system-ideas/index.adoc:14
msgid "This page presents ideas for future terrain development."
msgstr ""

#. type: Plain text
#: content/source/docs/terrain-system-ideas/index.adoc:16
msgid "toc::[]"
msgstr ""

#. type: Title ==
#: content/source/docs/terrain-system-ideas/index.adoc:17
#, no-wrap
msgid "Useful terrain resources"
msgstr ""

#. type: Plain text
#: content/source/docs/terrain-system-ideas/index.adoc:20
msgid ""
"Here's a short list of articles that I've found useful while thinking about "
"this terrain engine.<br>"
msgstr ""

#. type: Plain text
#: content/source/docs/terrain-system-ideas/index.adoc:22
msgid ""
"http://www.terrain.dk/[Very Large, Very Detailed Terrain] - procedural "
"fractal detail generation (but missing any type of alpha splatting or vector "
"overlays for user-specified detail like roads or parking lots)"
msgstr ""

#. type: Plain text
#: content/source/docs/terrain-system-ideas/index.adoc:23
msgid ""
"http://citeseer.ist.psu.edu/cache/papers/cs/1324/http:zSzzSzwww9.informatik.uni-erlangen.dezSzPersonszSzKobbeltzSzpaperszSzfour.pdf/kobbelt96interpolatory.pdf[Four-Point "
"Subdivision] - The subdivision method used to divide the heightmap smoothly "
"before applying fractal detail (note that this requires the two neighboring "
"points to each page. This will be handled by asking the neighbor for the "
"height values, and using linear interpolation if it is not yet loaded (it "
"will be beyond the view distance anyway)."
msgstr ""

#. type: Plain text
#: content/source/docs/terrain-system-ideas/index.adoc:24
msgid ""
"http://research.microsoft.com/en-us/um/people/hoppe/proj/geomclipmap/[Geometry "
"Clipmaps] - their compression method looks to be best-in-class, though their "
"GPU representation seems a little weird - it doesn't account for portions of "
"land that are detailed enough to be displayed at a higher LODs farther away, "
"and large enough flat places nearby to be displayed at lower LODs. In other "
"words it assumes all terrains are *perfect* fractals."
msgstr ""

#. type: Plain text
#: content/source/docs/terrain-system-ideas/index.adoc:25
msgid ""
"http://en.wikipedia.org/wiki/Progressive_Graphics_File[Progressive Graphics "
"File] - an image compression library which works especially well on natural "
"images (of which heightmaps are model citizens)."
msgstr ""

#. type: Plain text
#: content/source/docs/terrain-system-ideas/index.adoc:26
msgid ""
"http://research.microsoft.com/en-us/um/people/hoppe/proj/geomclipmap/[Vector-based "
"terrains] - this one talks about using a spline graph to create user "
"specified detail at resolutions higher than that stored in the "
"heightmap. This is perfect for roads, but their textures are "
"cartoony-looking for a reason... the textures they generate still have "
"pixels bigger than one inch even directly below you. If I use this approach, "
"I'll have to subdivide further down to get a decent level of detail, and I'm "
"not sure that there will be enough memory. (edit) If I generate the textures "
"procedurally every frame in the pixel shader, it may work, but it may also "
"kill the gpu. I may instead implement the flattening in the vertex shader, "
"then use decals to actually draw the roads on top of the terrain."
msgstr ""

#. type: Plain text
#: content/source/docs/terrain-system-ideas/index.adoc:27
msgid ""
"http://www2.imm.dtu.dk/pubdb/views/edoc_download.php/1425/pdf/imm1425.pdf[Real-time "
"Terrain Rendering using Smooth Hardware Optimized Level of Detail] describes "
"the LOD approach used by Ogre's terrain engine (except Ogre uses skirts "
"instead of stitching), which will be incorporated into mine. They don't care "
"much about texturing or anything other than the underlying mesh."
msgstr ""

#. type: Plain text
#: content/source/docs/terrain-system-ideas/index.adoc:28
msgid ""
"http://http.developer.nvidia.com/GPUGems2/gpugems2_chapter26.html[GPU Perlin "
"Noise] - Some variant of a 2D version of this will be used to supply the "
"randomness to the fractal functions (instead of the blocky texture lookup "
"used in terrain.dk)."
msgstr ""

#. type: Plain text
#: content/source/docs/terrain-system-ideas/index.adoc:29
msgid ""
"http://developer.amd.com/Assets/Tatarchuk-Noise%28GDC07-D3D_Day%29.pdf[More "
"GPU Noise] - I'm still thinking about the noise generator... it has to be on "
"the GPU and it has to be fast. This slideshow is a good overview of the "
"concepts involved in this type of noise function."
msgstr ""

#. type: Plain text
#: content/source/docs/terrain-system-ideas/index.adoc:30
msgid ""
"http://www.vterrain.org/[vTerrain.org] - a good knowledge of terrain "
"rendering requires reading this entire site (I haven't done it yet, but I've "
"read almost everything in the Rendering section that looked like it applied "
"to modern GPUs). Parts and pieces of any of these papers may slip into my "
"terrain engine."
msgstr ""
